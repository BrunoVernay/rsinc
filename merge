#!/usr/bin/python3

'''
merge

Copyright (c) 2019 C. J. Williams

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

print('Copyright 2019 C. J. Williams (CHURCHILL COLLEGE)')
print('This is free software with ABSOLUTELY NO WARRANTY.')

drive_dir = '/home/conor/drive/' #where config and data files will be stored

import argparse
import sys
import re
import os.path
import io
import subprocess

from datetime import datetime
import time
import collections

sys.path.insert(0, drive_dir)
os.chdir(drive_dir)
from config import *


LINE_FORMAT = re.compile(u'\s*([0-9]+) ([\d\-]+) ([\d:]+).([\d]+) (.*)')


def log(*args):
    if verbosity:
        print(*args)


def load_list(infile):
    d = {}
    log('reading:', infile)
    try:
        with io.open(infile, mode='rt', encoding='utf8') as f:
            for line in f:
                out = LINE_FORMAT.match(line)
                if out:
                    size = out.group(1)
                    date = out.group(2)
                    _time = out.group(3)
                    microsec = out.group(4)
                    date_time = time.mktime(datetime.strptime(
                        date + ' ' + _time, '%Y-%m-%d %H:%M:%S').timetuple()) + float('.' + microsec)
                    filename = out.group(5)  # .decode("utf-8")  # cjn
                    d[filename] = {u'size': size, u'datetime': date_time}
                else:
                    print(u"line (ignored) in {}:\n  <{}>".format(infile, line))
        # return Success and a sorted list
        return collections.OrderedDict(sorted(d.items()))

    except Exception as e:
        print(u"Exception in load_list loading <{}>:  <{}>".format(infile, e))
        exit(1)


# ***** rclone call wrapper functions with retries *****
maxTries = 3


def rclone_lsl(path, ofile):
    for x in range(maxTries):
        with open(ofile, "w") as of:
            process_args = ["rclone", "lsl", path]
            if not subprocess.call(process_args, stdout=of):
                return 0
    print("LSL-FAILED:", path)
    exit(1)


class data():
    def __init__(self, base, arg, last):
        swap = str.maketrans("/", '_')

        self.path = base + arg + '/'
        self.p_old = arg.translate(swap) + last + '.txt'  # remove / from arg
        self.p_tmp = arg.translate(swap) + last + '.tmp'  # remove /

        self.d_old = {}
        self.d_tmp = {}
        self.d_dif = {}

        self.s_old = set({})
        self.s_tmp = set({})
        self.s_dif = set({})

    def build_dif(self):
        self.s_old = set(self.d_old)
        self.s_tmp = set(self.d_tmp)

        deleted = self.s_old.difference(self.s_tmp)
        created = self.s_tmp.difference(self.s_old)

        inter = self.s_tmp.intersection(self.s_old)

        for key in created:
            self.d_dif.update({key: 3})

        for key in deleted:
            self.d_dif.update({key: 2})

        for key in inter:
            if self.d_old[key]['size'] != self.d_tmp[key]['size']:
                self.d_dif.update({key: 1})
            elif self.d_tmp[key]['datetime'] > self.d_old[key]['datetime']:
                self.d_dif.update({key: 1})
            else:
                self.d_dif.update({key: 0})

        self.s_dif = set(self.d_dif)


class direct():
    def __init__(self, arg):
        self.lcl = data(base_l, arg, '_lcl')
        self.rmt = data(base_r, arg, '_rmt')
        self.path = arg

    def build_dif(self):
        self.lcl.build_dif()
        self.rmt.build_dif()


def check_exist(path):
    if os.path.exists(path):
        log('checked', path)
        return 0
    else:
        return 1


def cpyR(source, dest):
    print("copy:", source, "to", dest)
    if not dry_run:
        subprocess.run(['rclone', 'copyto', source, dest])
    return


def cpyL(dest, source):
    print("copy:", source, "to", dest)
    if not dry_run:
        subprocess.run(['rclone', 'copyto', source, dest])
    return


def null(*args):
    log('Null with', args[0])
    return


def conflict(source, dest):
    print('conflict', source, dest)
    if not dry_run:
        subprocess.run(['rclone', 'moveto', source, source + ".lcl_conflict"])
        subprocess.run(['rclone', 'moveto', dest, dest + ".rmt_conflict"])

        cpyR(source + ".lcl_conflict", dest + ".lcl_conflict")
        cpyL(source + ".rmt_conflict", dest + ".rmt_conflict")
    return


def delL(left, right):
    print('delete', left)
    if not dry_run:
        subprocess.run(['rclone', 'delete', left])
    return


def delR(left, right):
    print('delete', right)
    if not dry_run:
        subprocess.run(['rclone', 'delete', right])
    return


LOGIC = [[null, cpyL, delL, conflict],
         [cpyR, conflict, cpyR, conflict],
         [delR, cpyL, null, cpyL],
         [conflict, conflict, cpyR, conflict]]

folders = []
main = []

verbosity = False

# ***** arguments read *****

parser = argparse.ArgumentParser()

parser.add_argument("folders", help="folders to sync", nargs='*')

parser.add_argument("-f", "--first", help="first run flag",
                    action="store_true")

parser.add_argument("-v", "--verbose", action="store_true", help="lots of info")

parser.add_argument("-d", "--dry", action="store_true", help="do a dry run")

parser.add_argument("-r", "--recovery", action="store_true",
                    help="enter recovery mode")

args = parser.parse_args()

if args.folders == []:
    folders = default_folders
else:
    for folder in args.folders:
        folders.append(folder)

dry_run = args.dry
verbosity = args.verbose

# ***** Build main data structure *****
for f in folders:
    main.append(direct(f))

# ***** check exists local directories *****
if not args.first:
    main[:] = [tup for tup in main if not check_exist(tup.lcl.path)]

for f in main:
    print('Attempting:', f.path, '\n')
    recover = args.recovery

    if check_exist(f.lcl.p_tmp) == 0 or check_exist(f.rmt.p_tmp) == 0:
        print('ERROR, detected crash, missing .tmp')
        recover = True

    # ***** first run *****
    if args.first:
        print("First run making index files")
        log("Writing:", f.rmt.p_old, f.lcl.p_old)

        rclone_lsl(f.rmt.path, f.rmt.p_old)
        rclone_lsl(f.lcl.path, f.lcl.p_old)
        recover = bool(input('Enter recover mode? y/n:'))
    else:
        if check_exist(f.lcl.p_old) or check_exist(f.rmt.p_old):
            print("Enter, cant find old file, run with -f")
            continue

    # ***** make and read files *****
    print("Making tmp files")

    rclone_lsl(f.rmt.path, f.rmt.p_tmp)
    rclone_lsl(f.lcl.path, f.lcl.p_tmp)

    print("Reading files")

    f.lcl.d_old = load_list(f.lcl.p_old)
    f.rmt.d_old = load_list(f.rmt.p_old)

    f.lcl.d_tmp = load_list(f.lcl.p_tmp)
    f.rmt.d_tmp = load_list(f.rmt.p_tmp)

    # ***** confirm old dicts match ** ***
    if not args.first:
        lcl = set(f.lcl.d_old)
        rmt = set(f.rmt.d_old)

        if len(lcl.symmetric_difference(rmt)) > 0:
            print("ERROR old dicts corrupt, size wrong")
            continue

        for key in f.lcl.d_old:
            if f.lcl.d_old[key]['size'] != f.rmt.d_old[key]['size']:
                print("ERROR old dicts corrupt at:", key)
                continue

    # ***** build diff dicts *****
    print('Building change dicts  \n')

    f.build_dif()

    # ***** main logic *****
    print('Main logic begins')
    if recover:
        print("Running recovery")
        rmt_dif = f.rmt.s_tmp.difference(f.lcl.s_tmp)  # in rmt only
        lcl_dif = f.lcl.s_tmp.difference(f.rmt.s_tmp)  # in lcl only

        inter = f.rmt.s_tmp.intersection(f.lcl.s_tmp)  # in both

        for key in rmt_dif:
            cpyL(f.lcl.path + key, f.rmt.path + key)

        for key in lcl_dif:
            cpyR(f.lcl.path + key, f.rmt.path + key)

        for key in inter:
            if f.lcl.d_tmp[key]['size'] != f.rmt.d_tmp[key]['size']:
                if f.lcl.d_tmp[key]['datetime'] > f.rmt.d_tmp[key]['datetime']:
                    cpyR(f.lcl.path + key, f.rmt.path + key)
                else:
                    cpyL(f.lcl.path + key, f.rmt.path + key)

    else:
        rmt_dif = f.rmt.s_dif.difference(f.lcl.s_dif)  # in rmt only
        lcl_dif = f.lcl.s_dif.difference(f.rmt.s_dif)  # in lcl only

        inter = f.rmt.s_dif.intersection(f.lcl.s_dif)  # in both

        for key in inter:
            LOGIC[f.lcl.d_dif[key]][f.rmt.d_dif[key]](
                f.lcl.path + key, f.rmt.path + key)

        for key in lcl_dif:
            if f.lcl.d_dif[key] != 2:
                cpyR(f.lcl.path + key, f.rmt.path + key)

        for key in rmt_dif:
            if f.rmt.d_dif[key] != 2:
                cpyL(f.lcl.path + key, f.rmt.path + key)

    # ***** clean up temps *****

    if not dry_run:
        rclone_lsl(f.rmt.path, f.rmt.p_tmp)
        rclone_lsl(f.lcl.path, f.lcl.p_tmp)

        subprocess.run(["mv", f.lcl.p_tmp, f.lcl.p_old])
        subprocess.run(["mv", f.rmt.p_tmp, f.rmt.p_old])
    else:
        subprocess.run(["rm", f.lcl.p_tmp])
        subprocess.run(["rm", f.rmt.p_tmp])

print("Sync Done")
